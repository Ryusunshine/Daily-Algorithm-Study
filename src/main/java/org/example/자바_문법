********************************************************************************************************
문제 풀기전
1. 문제 다 읽고 어떤 알고리즘으로 풀수 있는지 생각하기!!
2. 문제 어떻게 풀어야할지 디테일하게 쓰기
3. 조건 꼭 쓰기
********************************************************************************************************
while (progresses.length > 0 && progresses[0] >= 100){
    // progresses[0] 에 접근하기 전에 우선 배열이 있는지 확인해야한다.(progresses.length > 0)

// 배열 접근할때는 항상 배열이 있는지부터 확인!!
// 문자열 예외처리는 문자열이 !something,equals("") 이 확인!!!

항상 hashMap 다룰때는 hashMap.isEmpty() 인지 확인!!

********************************************************************************************************

문자열 일치하는지 확인하기위해서는 .equals 써야해!!!!

String에서 하나의 문자를 가져올려면 substring 써야해!!!

1. 값이 존재하는지, 존재 안하는지 판별
그리디(체육복 문제 풀기)
contains(i-1);

Arrays.sort(intArr, Collections.reverseOrder()); // 내림차순 정렬

Arrays.sort(intArr); // 오름차순 정렬

// 글자를 알파벳순으로 정렬하기 위한 방법
for (int i = 0; i < orders.length; i++) {
    char[] arr = orders[i].toCharArray(); // 알파벳 담는 배열 만든후, x, y, z 넣어서 알파벳순으로 정렬
    Arrays.sort(arr);
    orders[i] = String.valueOf(arr);
}

//int 배열을 List 타입으로 변환
List<Integer> intList = Arrays.asList(intArr);

//마지막 인덱스
s.length - 1 - i

// 리스트에서 특정 문자열 찾기
int x = Arrays.asList(seoul).indexOf("Kim");

// 모든 경우의 수를 탐색해야한다면 DFS 사용
// 최단거리, 최소비용 등 가장 적은 횟수로 답을 찾아내야하는 경우에는 BFS 사용

combination(now+left.charAt(i), left.substring(i+1), courseLen-1);

Collections.max(hash.values)

// 리스트를 배열로
String[] answer = list.toArray(String[]::new);

// 리스트 정렬
Collections.sort(리스트)
// 배열 정렬
Arrays.sort(배열)

********************************************************************************************************
소수인지 판별

private static boolean isPrime(int num){
    // 0과 1은 소수가 아니므로 예외처리
    if(num == 0 || num == 1) return false;

    // 에라토스테네스의 방식으로 루트값까지 확인
    int limit = (int)Math.sqrt(num);

    for(int i = 2; i <= limit; i++){
        if (num % i == 0) return false;
    }

    return true;
}
********************************************************************************************************
수학 문법

루트값
(int)Math.sqrt(num);

최소값
Math.min(num1, num2);

최대값
Math.max(num1, num2);
********************************************************************************************************
Iterator<Integer> it = hashSet.iterator();
while (it.hasNext()){
********************************************************************************************************
재귀

1. 문자열을 재귀함수로 만들때 꼭 빈 스트링에 대한 예외처리해주기!!!!


********************************************************************************************************
List -> 배열
answerList.stream().mapToInt(n->n).toArray();

배열 정렬
Arrays.sort(배열)

리스트 정렬
Collections.sort(리스트)

문자열 -> 배열
char[] c = my_string.toLowerCase().toCharArray();

빈문자열 제거
myString.replace(" ", "");

리스트 -> 배열
ArrayList<String> list = new ArrayList<>();
String[] result =  new String[list.size()];
list.toArray(result);
********************************************************************************************************

//문자열

// 문자 -> 알파벳 순서대로 정렬하기
char[] arr = orders[i].toCharArray(); // 알파벳 담는 배열 만든후, x, y, z 넣어서 알파벳순으로 정렬
Arrays.sort(arr);

// 특정 문자열이 존재하는지 확인 & 어디에 존재하는지 찾기
s.indexOf("..")

// 문자+문자를 더할떄는
s + charAt(i)

문자열안에 문자열 있는지 확인
str1.contains(str2)

//StringBuffer 클래스
String 클래스는 인스턴스를 생성할 때 지정된 문자열을 변경할 수 없지만 StringBuffer 클래스는 변경이 가능하다!
내부적으로 문자열 편집을 위한 버퍼(buffer)를 가지고 있으며, StringBuffer인스턴스를 생성할 때 그 크기를 지정할 수 있다.
주요 메서드
1. .append( ) : StringBuffer 인스턴스가 저장하고 있는 문자열 뒤에 덧붙인다
2. .delete(int start, int end) : 시작위치(start) 부터 끝 위치(end) 사이에 있는 문자를 제거한다 (단, 끝 위치의 문자는 제외!)
3. .deleteCharAt(int index) : 지정된 위치(index)의 문자를 제거한다.
4. .insert(int pos, String str) : 두번째 매개변수로 받은 값을 문자열로 변환하여 지정된 위치(pos)에 추가한다. (pos는 0부터 시작)
5. .replace(int start, int end, string str) : 지정된 범위(start ~ end)의 문자들을 주어진 문자열로 바꾼다. (end 위치의 문자는 범위에 포함 되지않는다!)
6. .reverse( ) : 문자열의 순서를 거꾸로 나열한다.
7. .setCharAt(int index, char ch) : 지정된 위치의 문자를 주어진 문자(ch)로 바꾼다
8. .toString( ) : StringBuffer 인스턴스의 문자열을 String으로 반환한다.
9. .subString(int start) or .subString(int start, int end)
10. .subString(int start) or .subString(int start, int end): 지정된 범위 내의 문자열을 String으로 뽑아서 반환한다.

// 문자열 뒤집기
StringBuffer sb = new StringBuffer(my_string);
return sb.reverse().toString();

// 문자열 길이
StringBuffer sb = new StringBuffer(my_string);
sb.length()*2;

// 문자인지 숫자인지 판별
//charAt메서드로 변환 후 int로 변경해줍니다.

아스키코드값의 0부터 9
정수는 48부터 57까지 아스키코드값
문자열 s
안자르고 바로 문자열 길이만큼 반복
for (int i=0;i<s.length();i++) {
    if (s.charAt(i) < '0' || s.charAt(i) > '9') return false;
}

// 문자열s의 길이
s.length()

//자바의 문자열은 불변(immutable)하기 때문에 string[i]와 같은 방식으로 문자에 직접 접근하거나 수정하는 것은 허용되지 않음
//대신, 문자열에서 특정 부분을 추출하고자 할 때 substring() 메서드를 사용해야한다.
my_string.substring(my_string.length()-n);

//int[] 배열 길이
length

//문자열 곱하기
my_string.repeat(k);

myString.contains(pat) ? 1 : 0;


********************************************************************************************************

//arrayList -> 배열 []
return answer.stream().mapToInt(n->n).toArray();

// 인덱스 요소로 배열 정렬
Arrays.sort(arr, Comparator.comparingInt((int[] x) -> x[1]).thenComparingInt(x -> x[0]));

// 이진탐색

// 가운데 값이 작은지 큰지 비교한후 start,
//end 포인트를 가운데 값으로 바꾸는거야

for (int i = 0; i <m; i++){
    boolean find = false;
    int target = sc.nextInt();
    int start = 0; // 맨 왼쪽(왼쪽 인덱스)
    int end = A.length-1; //맨 오른쪽(마지막 인덱스)
    while (start <= end) {
        int mid_index = (start + end) / 2;
        int mid_value = A[mid_index];
        if (mid_value > target) {
            end = mid_index - 1;
        } else if (mid_value < target) {
            start = mid_index + 1;
        } else { // 같이 같은경우, 즉 정답을 찾은경우
            find = true;
            break;
        }
    }
********************************************************************************************************
//슬라이딩 윈도우

// 슬라이딩 하기전 초기세팅으로 현재칸들의 합을 구해야해
for (int i = P; i < S; i++){ // i = 시작인덱스(현재부분배열의 오른쪽 인덱스)를 현재 부분배열의 크기로, P = 현재 부분배열의 크기, S = 전체 배열의 크기,
    // 현재 부분배열의 크기 인덱스에서 오른쪽으로 한칸씩 가겠다는 의미
    int j = i-P; // j = 맨 왼쪽, i = 맨 오른쪽 (부분배열의 맨 오른쪽 인덱스에서 배열길이만큼 빼면 왼쪽 인덱스값)
    Add(A[i]); // 맨 오른쪽값 추가
    Remove(A[j]); // 맨 왼쪽값 제거
    // 한번 이동을 할때마다 값이 같은지 확인
    if (checkSame == 4) result++;
}
********************************************************************************************************
//버블 정렬
//정렬된 값은 오른쪽에 고정. 따라서 j는 이미 정렬된 i 전까지만 루프돌면된다.
for (int i = 0; i < N-1; i++) { //루프 도는횟수는 전체 배열의 개수의 -1
    for (int j = 0; j < N-1-i; j++){
        if (A[j] > A[j+1]) {
            int temp = A[j];
            A[j] = A[j+1];
            A[j+1] = temp;
        }
    }
}
********************************************************************************************************
// BFS - 2차원
static boolean visited[];
private static void bfs(int i, int j) {
    Queue<int[]> queue = new LinkedList<>();
    queue.offer(new int[]{i, j});
    visited[i][j] = true;
    while (!queue.isEmpty()) {
        int[] now = queue.poll();
        int x = now[0];
        int y = now[1];
        for (int d = 0; d < 4; d++) {
            int nx = x + dx[d];
            int ny = y + dy[d];
            if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
                if (graph[nx][ny] == 1 && !visited[nx][ny]) {
                    visited[nx][ny] = true;
                    graph[nx][ny] = graph[x][y] + 1; // 이전 위치의 거리 + 1
                    queue.offer(new int[]{nx, ny}); // 방문한 노드를 큐에 추가
                }
            }
        }
    }
}

// BFS - 1차원(노드)
static boolean visited[];
static Queue<Integer> que = new LinkedList<>();

public int solution(int n, int[][] computers) {
    int answer = 0;
    visited = new boolean[n];

    for(int i=0; i<n; i++) {
        if(!visited[i]) {
            BFS(i, computers,n); // 현재 노드
            answer++;
        }
    }

    return answer;
}

static void BFS(int i, int computers[][], int n) {
    que.offer(i);
    visited[i] = true;

    while(!que.isEmpty() ) {
        int now = que.poll();

        for(int j=0; j<n; j++) {
            if(!visited[j] && computers[now][j] == 1) {
                visited[j] = true;
                que.offer(j);
            }
        }

    }
}
********************************************************************************************************
// DFS

for (int i = 1; i < N+1; i++){
    A[i] = new ArrayList<Integer>();
}

for (int j = 0; j < M; j++){
    st = new StringTokenizer(br.readLine());
    int a = Integer.parseInt(st.nextToken());
    int b = Integer.parseInt(st.nextToken());
    A[a].add(b);
    A[b].add(a);
}

private static void DFS(int now) { //현재 노드가 방문노드이면 더이상 탐색x
    if (visited[now]){
        return;
    }
    visited[now] = true;
    for(int next: A[now]){
        if (!visited[next]){
            DFS(next);
        }
    }
}
********************************************************************************************************
//배열의 첫 번째 요소를 제거한 새로운 배열을 반환하는 메소드
private static int[] removeElement(int[] arr) {
  // 현재보다 하나 작은사이즈의 배열선언
  int[] newArr = new int[arr.length - 1];

  // 1부터 시작하면서 차례대로 배열에 담음
  for (int i = 1; i < arr.length; i++) {
      newArr[i - 1] = arr[i];
  }

  return newArr;
}
********************************************************************************************************
// 큐
Queue<Integer> q = new LinkedList<>();
q.add();
q.poll();
********************************************************************************************************
// 스택
Stack<Integer> stack = new Stack<>();
stack.push()
stack.pop();
********************************************************************************************************
//투포인터
// 두개의 포인터가 가르키는 값의 더한값이 큰지작은지 비교후 포인터 이동
int count = 0;
// 투포인터 생성
int i = 0; // 왼쪽 인덱스(처음 인덱스)
int j = N - 1; //오른쪽 인덱스(마지막 인덱스)
while (i < j) {
    if (A[i] + A[j] < M ) i++; //합이 적으면 왼쪽인덱스 증가, 인덱스만 증가
    else if (A[i] + A[j] > M) j--; // 합이 크면 오른쪽 인덱스 감소
    else {
        count ++;
        i ++;
        j --;
    }
}

//투포인터2
// sum 으로 비교해

외울거!!!!

// while - if
//while (end != 마지막 인덱스)

int count = 1;
int sum = 1;  // sum  초기세팅 하는거 중요해!!!
int start_index = 1;
int end_index = 1;
while (end_index != N) { // 마지막 인덱스가 아닐떄까지
    if (sum == N) {
        count ++;
        end_index++;
        sum += end_index; // count 증가해줬으니깐 end_index를 증가해서 sum에다가  end_index를 더해준다.
    } else if (sum > N){
        sum = sum - start_index;
        start_index ++;
    } else {
        end_index++;
        sum = sum+end_index;
    }
}
********************************************************************************************************
// 해시
// 해시맵이 비였는지 안비였는지 체크!!!! 항상 예외인 경우를 생각해야해!!
if (!hashMap.isEmpty()){
    int max = Collections.max(hashMap.values());
hash.put(type, hash.getOrDefault(type, 0) + 1); // 지정된 키로 매핑된 값이 없는 경우 0가져온다
// length, length() 차이 잘 확인해!1
for (int i = 0; i < phone_book.length; i++){
    for (int j = 1; j < phone_book[i].length(); j++){

hashMap.clear(); /// 꼭 중요해!!!!!
********************************************************************************************************
arrayList 정렬
Collections.sort() 쓴다!!
ex) Collections.sort(arrayList);

ArrayList<Integer> arrayList는 .size()를 쓴다.

// String[] = .length

for (int i = 0; i< phone_book.length; i++){ // phoneBook을 돌면서
    for (int j = 1; j < phone_book[i].length(); j++){ // 각각 전화번호를 자르면서 전화번호부에 있는지 확인할거야
        if (hash.containsKey(phone_book[i].substring(0, j))){
//                    return false;
        }
    }
}

********************************************************************************************************
// 다익스트라

// 다익스트라는 graph에 양쪽노드에 각각 add 해줘야해!!
graph[start].add(new Node(end, cost));
graph[end].add(new Node(start, cost)); // 양방향 그래프이므로 양쪽에 모두 추가

//초기세팅
ArrayList<Node>[] graph = new ArrayList[n+1];
for (int i = 0; i <= n; i++) {
    graph[i] = new ArrayList<>();
}


// 노드 설정!!! Comparable<Node> 중요
// public int compareTo(Node o)
// Integer.compare() 외워1!

public static class Node implements Comparable<Node> {
    int index;
    int cost;

    public Node(int index, int cost){
        this.index = index;
        this.cost = cost;
    }

    @Override
    public int compareTo(Node o){
        return Integer.compare(this.cost, o.cost);
    }
}

graph[v].add(new Node(w, cost));

public static void main(String[] args) throws IOException {

    //그래프 입력 받기
    BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
    //정점의 개수, 간선의 개수
    int n = Integer.parseInt(bf.readLine());
    int m = Integer.parseInt(bf.readLine());

    graph = new ArrayList[n+1];
    for (int i = 0; i <= n; i++)  graph[i] = new ArrayList<>();

    StringTokenizer st;
    for(int i = 0 ; i < m; i++) {
        st = new StringTokenizer(bf.readLine());
        int v = Integer.parseInt(st.nextToken());
        int w = Integer.parseInt(st.nextToken());
        int cost = Integer.parseInt(st.nextToken());

        graph[v].add(new Node(w, cost));
    }

    int start = Integer.parseInt(bf.readLine());

    //다익스트라 알고리즘 수행
    Dijkstra(n, start);

}

//우선순위 큐에 정점번호 + 가중치 저장을 위해 만드는 것이다.
static class Node implements Comparable<Node>{
    int index;
    int cost;

    //정점번호, 가중치 저장
    public Node(int index, int cost) {
        this.index = index;
        this.cost = cost;
    }

    //cost(=가중치)  중심으로 우선순위가 정해지기 때문에 compareTo 오버라이딩
    //다른 방법으로 이를 생략하고 우선순위 큐 아래처럼 선언
    /**PriorityQueue<Node> pq = new PriorityQueue<Node>
     ((o1, o2) -> Integer.compare(o1.cost, o2.cost));
     **/
    @Override
    public int compareTo(Node o) {
        return Integer.compare(this.cost, o.cost);
    }
}

public class Main {
    static ArrayList<Node>[] graph;

    //노드의 크기, 출발지
    public static void Dijkstra(int n, int start) {
        //visitied 배열은 정점을 방문했는지 확인하고,
        // dist 배열은 출발지로부터 거리가 얼마나 되는지
        boolean[] visited = new boolean[n + 1];
        int[] dist = new int[n + 1];
        int INF = Integer.MAX_VALUE;

        //dist 배열은 INF(무한대) 값으로 초기화한다.
        Arrays.fill(dist, INF);

        //출발지는 방문으로 표시하고 dist배열 해당 인덱스에 0으로 기록한다.
        // 출발지 정점과 가중치를 우선순위 큐에 넣는다. 이때 우선순위는 가중치가 가장 작은 것이다.
        dist[start] = 0;
        PriorityQueue<Node> pq = new PriorityQueue<>(); // Queue에 Node넣었으니깐 비교하는거 다 Node로 해야해
        pq.offer(new Node(start, 0));

        //큐가 빌 때 까지 다음을 반복한다.
        while(!pq.isEmpty()) {

            //큐 앞에 있는 값을 가져오고 삭제한다. 이를 now로 하겠다.
            // 이때 가져온 값은 현재 큐에 있는 값 중 출발지로부터 가장 가까운 거리(=작은 가중치)를 가졌다
            int now = pq.poll().index;

            if(visited[now]) continue;
            visited[now] = true;
            //index의 연결된 정점 비교
            for(Node next : graph[now]) {
                if(dist[next.index] > dist[now]+ next.cost) {
                    dist[next.index] = dist[now] + next.cost;

                    pq.offer(new Node(next.index, dist[next.index]));
                }
            }
        }

        //최소거리 출력
        for(int i : dist) {
            if(i == INF) System.out.print(0 + " ");
            else System.out.print(i+" ");
        }
    }
}

Sorting

자바에서 정렬하는 방법은 여러 개가 있는데, Stream에도 있습니다. 먼저, 인자 없이 그냥 호출할 경우 오름차순 정렬을 해줍니다.

IntStream.of(14, 11, 20, 39, 23)
  .sorted()
  .boxed()
  .collect(Collectors.toList());
// [11, 14, 20, 23, 39]

역순으로 정렬하고 싶으면 다음과 같이 해줍니다.

List<String> lang =
  Arrays.asList("Java", "Scala", "Groovy", "Python", "Go", "Swift");

lang.stream()
  .sorted(Comparator.reverseOrder())
  .collect(Collectors.toList());
// [Swift, Scala, Python, Java, Groovy, Go]

혹은 String compareTo를 직접 사용해서 정렬해줄수도 있습니다.

lang.stream()
  .sorted((o1, o2) -> o2.compareTo(o1))
  .collect(Collectors.toList());

  마지막으로 문자열 길이를 기준으로 정렬하는 예시입니다.

lang.stream()
.sorted((s1, s2) -> s2.length() - s1.length())
.collect(Collectors.toList());
// [Groovy, Python, Scala, Swift, Java, Go]

mapToInt를 해야 sum, max 같은걸 할 수 있다. 이건 IntStream에 내장되어있어서 그렇다.

int[] arr = {1,2,3,10};

int sum = IntStream.of(arr).sum();
System.out.println(sum);

// int[] -> IntStream -> Stream<Integer> -> Integer[] 하는 방법
Integer[] oneLineResult = Arrays.stream(num)
								.boxed()
                .toArray(Integer[]::new);


class Divisible {
    public int[] divisible(int[] array, int divisor) {
        return Arrays.stream(array).filter(factor -> factor % divisor == 0).toArray();
    }
    // 아래는 테스트로 출력해 보기 위한 코드입니다.
    public static void main(String[] args) {
        Divisible div = new Divisible();
        int[] array = {5, 9, 7, 10};
        System.out.println( Arrays.toString( div.divisible(array, 5) ));
    }
}
