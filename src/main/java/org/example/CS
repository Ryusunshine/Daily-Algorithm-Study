1. 라이브러리

공통으로 사용될수 있는 특정한 기능들을 모듈화한것. 폴더명, 파일명 등에 대한 규칙이 없고 프레임워크에 비해 자유롭다. 예를 들어, 무언가를 자를때,
'도구'인 '가위'를 사용해서 '내가'직접 컨트롤하여 자르는데, 라이브러리는 이와 비슷하다

2. 프레임워크

공통으로 사용될수 있는 특정한 기능들을 모듈화한것을 의미한다. 폴더명, 파일명 등에 대한 규칙이 있으며, 라이브러리에 비해 좀 더 엄격하다.다른곳으로 이동할때
'도구'인 비행기를 타고 이동하지만 '비행기'가 컨트롤하고 나는 가만히 앉아 있어햐한다. 프레임워크는 이와 비슷하다.

3. 디자인 패턴
디자인 패턴이란 프로그램을 설계할때 발생했던 문제점들을 객체 간의 상호 관계 등을 이용하여 해결할 수 있도록 하나의 '규약' 형태로 만들어 놓은 것을 의미한다.

3-1. 싱글톤 패턴
싱글톤 패턴은 하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴이다. 하나의 클래스를 기반으로 여러 개의 개별적인 인스턴스를 만들수 있지만. 그렇게 하지않고
'하나의 클래스'를 기반으로 '하나의 인스턴스'를 만들어 이를 기반으로 로직을 만드는데 쓰이며, 보통 데이터베이스 연결 모듈에 많이 사용된다.
- 하나의 인스턴스를 만들어놓고 해당 인스턴스를 다른 모듈들이 공유하며 사용하여 인스턴스를 생성할 때 드는 비용이 줄어드는 장점이 있다.
- 하지만 의존성이 높아진다.

3-2 어댑터 패턴

용도 : 클래스를 바로 사용할 수 없는 경우가 있음 (다른 곳에서 개발했다거나, 수정할 수 없을 때) 중간에서 변환 역할을 해주는 클래스가 필요 → 어댑터 패턴
향후 인터페이스가 바뀌더라도, 변경 내역은 어댑터에 캡슐화 되므로 클라이언트 바뀔 필요X
이처럼 어댑터는 필요로 하는 인터페이스로 바꿔주는 역할을 한다

이처럼 업체에서 제공한 클래스가 기존 시스템에 맞지 않으면?
기존 시스템을 수정할 것이 아니라, 어댑터를 활용해 유연하게 해결하자

4. static에 대해 설명해주세요.
메모리에 올라갈 때 자동으로 생성되며 클래스 로딩이 끝나면 바로 사용할 수 있습니다.
즉, 인스턴스(객체) 생성 없이 바로 사용 가능합니다.
인스턴스 생성 없이 바로 사용 가능하기 때문에 프로그램 내에서 공통으로 사용되는 데이터들을 관리할 때 이용합니다.
모든 객체가 메모리를 공유한다는 특징이 있고, GC 관리 영역 밖에 있기 때문에 프로그램이 종료될 때까지 메모리에 값이 유지된 채로 존재하게 됩니다.
static은 자주 변하지 않는 값이나 공통으로 사용되는 값 같은 공용자원에 대한 접근에 있어서 매번 메모리에 로딩하거나 값을 읽어들이는 것보다
일종의 '전역변수'와 같은 개념을 통해 접근하는 것이 비용도 줄이고 효율을 높일 수 있습니다.

5. Inner Class(내부 클래스)의 장점에 대해 설명해주세요.
서로 관련 있는 클래스를 논리적으로 묶어서 표현함으로써, 캡슐화를 증가시키고, 코드의 복잡성을 낮출수 있다.
외부에서는 내부 클래스에 접근할 수 없으므로, 코드의 보안성을 높일수 있다.

6. Error와 Exception의 차이를 설명해주세요.

Error는 실행 중 일어날 수 있는 치명적 오류를 말합니다. 컴파일 시점에 체크할 수 없고, 오류가 발생하면 프로그램은 비정상 종료되며 예측 불가능합니다.
반면, Exception은 Error보다 비교적 경미한 오류이며, try-catch를 이용해 프로그램의 비정상 종료를 막을 수 있습니다.

7. Set과 Map의 타입이 Wrapper Class가 아닌 Object를 받을 때 중복 검사는 어떻게 할건지 설명해주세요.
hashCode() 메소드와 equals() 메소드를 오버라이딩하여 비교한후 이 두 개가 모두 맞으면 중복 객체입니다.




